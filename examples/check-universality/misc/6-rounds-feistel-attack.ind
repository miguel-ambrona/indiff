(* 6-rounds Feistel Attack! *)

is_universal {

  rounds F1,F2,F3,F4,F6.
  rounds F5 invertible.

  oracle R (x0,x1) :=
    x2 = x0 + F1(x1);
    x3 = x1 + F2(x2);
    x4 = x2 + F3(x3);
    x5 = x3 + F4(x4);
    x6 = x4 + F5(x5);
    x7 = x5 + F6(x6);
    return x6, x7.

  oracle R^-1 (x6,x7) :=
    x5 = x7 + F6(x6);
    x4 = x6 + F5(x5);
    x3 = x5 + F4(x4);
    x2 = x4 + F3(x3);
    x1 = x3 + F2(x2);
    x0 = x2 + F1(x1);
    return x0, x1.

  distinguisher :=
    x3  <-$ {0,1}^n;
    x3' <-$ {0,1}^n;
    x4  <-$ {0,1}^n;

    f1 <- F3(x3);
    f2 <- F3(x3');
    x2  = x4 + f1;
    x2' = x4 + f2;

    f3 <- F2(x2);
    f4 <- F2(x2');
    x1 = x3 + f3;
    x1' = x3' + f4;
    x1'' = x3' + f3;
    x1''' = x3 + f4;

    f5 <- F1(x1);
    f6 <- F1(x1');
    f7 <- F1(x1'');
    f8 <- F1(x1''');
    x0 = x2 + f5;
    x0' = x2' + f6;
    x0'' = x2 + f7;
    x0''' = x2' + f8;

    x6 = R_1(x0,x1);
    x6' = R_1(x0',x1');
    x6'' = R_1(x0'',x1'');
    x6''' = R_1(x0''',x1''');

    assert x1 + x1' + x1'' + x1''' = 0;

    f9  <- F5^-1(x4 + x6);
    f10 <- F5^-1(x4 + x6');
    f11 <- F5^-1(x4 + f1 + f2 + x6'');
    f12 <- F5^-1(x4 + f1 + f2 + x6''');

    assert f9 + f10 + f11 + f12 = 0;

    assert x1 <> x1';   assert x1 <> x1''; assert x1 <> x1''';
    assert x1' <> x1''; assert x1' <> x1''';
    assert x1'' <> x1''';

    assert f2 <> f3;
    assert f10 <> f11;  assert f10 <> f12;
    assert f11 <> f12;
    assert f4 <> f5;
    assert f6 <> f7;
    assert f8 <> f9;
    assert f1 <> 0; assert f2 <> 0; assert f3 <> 0; assert f4 <> 0;
    assert f5 <> 0; assert f6 <> 0; assert f7 <> 0; assert f8 <> 0;
    assert f9 <> 0; assert f10 <> 0; assert f11 <> 0; assert f12 <> 0;

    return 1;
  .

}.
